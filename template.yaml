AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ses-forwarder

  Simple configuration to capture, store, and forward emails to a new domain.

Parameters:
  S3BucketName:
    Type: String
    AllowedPattern: "^(?![-.])[.a-z0-9-]{3,63}(?<![-.])$"
    Description: Provide the bucket name to store mail messages.
  CreateBucketParam:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Select "yes" to create the bucket or "no" to use an existing bucket.
  EmailDomain:
    Type: String
    AllowedPattern: "^((?!-)[a-z0-9-]{1,63}(?<!-)\\.)+[a-z]{2,6}$"
    Description: Email domain that is receiving messages.
  DestinationDomain:
    Type: String
    AllowedPattern: "^((?!-)[a-z0-9-]{1,63}(?<!-)\\.)+[a-z]{2,6}$"
    Description: Email domain to foward messages to.
  SetupAthenaParam:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Select "yes" to setup Athena to query the email index.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Environment:
      Variables:
        S3_BUCKET: !Ref S3BucketName
        EMAIL_DOM: !Ref EmailDomain
        DEST_DOM: !Ref DestinationDomain

Conditions:
  CreateBucket: !Equals 
    - !Ref CreateBucketParam
    - 'true'
  SetupAthena: !Equals
    - !Ref SetupAthenaParam
    - 'true'

Resources:
  HandleEmailFunction:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handle_email/
      Handler: app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt HandleEmailFunctionRole.Arn
  HandleEmailFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref HandleEmailFunction
      Principal: "ses.amazonaws.com"
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn: !Sub "arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:receipt-rule-set/${EmailReceiptRuleSet}:receipt-rule/${AWS::StackName}-receipt-rule"
  HandleEmailFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: 
                  - !Sub "arn:${AWS::Partition}:s3:::${S3BucketName}"
                  - !Sub "arn:${AWS::Partition}:s3:::${S3BucketName}/*"
              - Effect: "Allow"
                Action:
                  - "ses:SendRawEmail"
                Resource: "*"
  EmailBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Condition: CreateBucket
    Properties: 
      BucketName: !Ref S3BucketName
  EmailReceiptRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties: 
      RuleSetName: !Sub "${AWS::StackName}-receipt-rule-set"
  EmailReceiptRule:
    Type: AWS::SES::ReceiptRule
    DependsOn: HandleEmailFunctionPermission
    Properties:
      RuleSetName: !Ref EmailReceiptRuleSet
      Rule: 
        Name: !Sub "${AWS::StackName}-receipt-rule"
        Enabled: yes
        ScanEnabled: yes
        Actions: 
          - S3Action: 
              BucketName: !Ref S3BucketName
              ObjectKeyPrefix: "messages/"
          - LambdaAction: 
              FunctionArn: !GetAtt HandleEmailFunction.Arn

  ### Setup AWS Glue and Athena ###
  GlueServiceRole:
    Type: AWS::IAM::Role
    # Create an IAM role named "AWSGlueServiceRole-rolename" and attach the AWS managed policy, AWSGlueServiceRole, 
    #   plus an inline policy that allows read access to the S3 Bucket
    Condition: SetupAthena
    Properties:
      RoleName: !Sub "AWSGlueServiceRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        -
          PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: 
                  - !Sub "arn:${AWS::Partition}:s3:::${S3BucketName}"
                  - !Sub "arn:${AWS::Partition}:s3:::${S3BucketName}/*"
  GlueDatabase:
    Type: AWS::Glue::Database
    Condition: SetupAthena
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub "emails-${AWS::StackName}"
        Description: !Sub "AWS Glue Database for Email Data from ${S3BucketName}"
  GlueCrawler:
    Type: AWS::Glue::Crawler
    Condition: SetupAthena
    Properties:
      Name: !Sub "email-index-crawler-${AWS::StackName}"
      Role: !GetAtt GlueServiceRole.Arn
      DatabaseName: !Ref GlueDatabase
      Targets:
        S3Targets:
          - Path: !Sub "s3://${S3BucketName}/index/"
